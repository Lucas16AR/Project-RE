Proyecto Final de Automatas & Gramaticas 2021

Proyecto RE SOFTWARE

Este programa en Python, consta en leer un archivo y que este filtre diferentes resultados. Se utiliza expresiones regulares.
Se lee el archivo .xlsx y despues en el menu se elige una opcion para mostrar un resultado con los filtros elegidos.

La puesta en marcha del proyecto constaba en organizar primero el repositorio "Project-RE" y las carpetas que contiene.
En la carpeta "docs" se encuentran los archivos a ser leidos y la documentacion del proyecto.
En la carpeta "files" se encuentran los archivos .xlsx donde estaran todos los resultados del programa.
En la carpeta "main" se encuentran todos las archivos .py que contienen el codigo para la ejecucion del programa.

La carpeta "main" contiene 5 archivos .py.

El archivo "clear.py" limpia la pantalla de la consola según el sistema operativo a usar.
Estas líneas importan dos módulos de Python, "os" y "platform". El módulo "os" proporciona una forma de interactuar 
con el sistema operativo subyacente y el módulo platform proporciona información sobre la 
plataforma y el sistema operativo en el que se está ejecutando Python.
Es una función útil para mejorar la legibilidad de la salida en una interfaz de línea 
de comandos, ya que permite limpiar la pantalla después de cada ejecución de un comando o programa.

El archivo "constants.py" sirve para contener todas las constantes que se utilizan en diferentes partes del proyecto.
Las constantes sirven para que el codigo quede mas corto y limpio, de esa manera, no tengo la necesidad de estar definiendo
las lineas que se muestran por pantalla.
Primero, se define un menú con diferentes opciones. Cada opción se muestra en una línea separada y se identifica con un número. 
Luego, la expresion regular y rutas de archivo que se utilizan en el proyecto.
A continuación, se definen algunas cadenas de entrada para las preguntas que se le hacen al usuario. 
También hay algunas cadenas de mensaje, que sirven como auxiliar en casos de error, validacion, espera, etc.
Finalmente, hay algunas cadenas que se utilizan para la salida.

Explicación de la expresión regular:

"^\d{4}[-/]\d{2}[-/]\d{2}[T ]\d{2}:\d{2}:\d{2}$"

* ^: Inicio de la cadena
* \d{4}: Cuatro dígitos para el año
* [-/]: El separador puede ser un guión o una barra
* \d{2}: Dos dígitos para el mes y el día
* T: El carácter 'T' o un espacio en blanco para separar la fecha y la hora
* \d{2}:\d{2}:\d{2}: La hora en formato HH:MM:SS
* $: Fin de la cadena

El archivo "functions.py" define algunas funciones que son utilizadas en el programa principal.
La función "help()" muestra un mensaje de ayuda y pregunta al usuario si desea ver los datos en el archivo Excel. Si el usuario ingresa "y", 
se llama a la función print_xlsx() del objeto User para imprimir los datos del archivo Excel. Si el usuario ingresa "n", la función simplemente regresa. 
Si el usuario ingresa cualquier otra cosa, se llama a la función "error()".
La función "return_menu()" pregunta al usuario si desea regresar al menú principal. Si el usuario ingresa "y", se muestra un mensaje y la función regresa. 
Si el usuario ingresa "n", se llama a la función "exit_program(): y se sale del programa. Si el usuario ingresa cualquier otra cosa, se llama a la función "error()".
La función "exit_program()" muestra un mensaje de salida y termina el programa.
La función "error()" muestra un mensaje de error y luego llama a la función "return_menu()".

El archivo "analyzer.py", contiene todas las funciones que se llamaran por pantalla y que realizaran los filtros que se pidan.

#El punto 1 es una función de búsqueda que busca sesiones de usuario en un archivo de Excel. 
La función espera que el archivo de Excel tenga dos columnas: "Usuario" y "Inicio de Conexion".
Primero, la función llama a otra función llamada "operate_xlsx_file()" que probablemente abre y lee el archivo de Excel y lo carga en un DataFrame de Pandas.
Luego, la función solicita al usuario que ingrese el ID del usuario que desea buscar.
Después, la función utiliza la función "loc" de Pandas para filtrar el DataFrame y devolver solo las filas que contienen el ID de usuario ingresado por el usuario. 
Luego selecciona solo las columnas "Usuario" y "Inicio de Conexion".
Si la longitud de las sesiones devueltas es cero, la función muestra un mensaje indicando que no se encontraron sesiones para ese usuario. 
Si no es cero, la función muestra las sesiones encontradas y las guarda en un archivo de Excel llamado "Users_Sessions.xlsx" en la ruta "../files/". 
Finalmente, la función muestra un mensaje que indica cuántas sesiones se encontraron y que se han guardado en el archivo de Excel.

#El punto 2 es otra función de búsqueda que busca sesiones de usuario en un archivo de Excel pero en un rango de fechas específico. 
La función utiliza una expresión regular para validar la entrada de fecha y hora del usuario.
Primero, la función llama a la función "operate_xlsx_file()" para cargar el archivo de Excel en un DataFrame de Pandas.
Luego, la función solicita al usuario que ingrese dos fechas y horas. El primer mensaje de impresión (cs.DT_RANGE_MSG) indica al usuario que debe ingresar un rango de fechas y horas. 
El segundo mensaje de impresión (cs.JUMP_LINE) es simplemente una línea en blanco para mejorar la legibilidad de la salida en la consola.
La función utiliza una expresión regular para validar la entrada de fecha y hora ingresada por el usuario. 
Si la entrada no coincide con el formato de fecha y hora esperado, se muestra un mensaje de error y la función devuelve inmediatamente.
Si las entradas son válidas, la función utiliza la función "loc" de Pandas para filtrar el DataFrame y devolver solo las filas que 
contienen el ID de usuario ingresado por el usuario y que están dentro del rango de fechas especificado.
Si la longitud de las sesiones devueltas es cero, la función muestra un mensaje indicando que no se encontraron sesiones para ese usuario en el rango de fechas especificado. 
Si no es cero, la función muestra las sesiones encontradas y las guarda en un archivo de Excel llamado "User_Sessions_Date.xlsx" en la ruta "../files/". 
Finalmente, la función muestra un mensaje que indica cuántas sesiones se encontraron y que se han guardado en el archivo de Excel.

#El punto 3 es una funcion que busca el tiempo total de sesion de un usuario a traves de su ID.
Este código es una función llamada total_session_time que busca el tiempo total de sesión de un usuario específico en un archivo de Excel.
Primero, la función llama al método operate_xlsx_file que devuelve un DataFrame que contiene los datos del archivo de Excel.
Luego, la función pide al usuario que ingrese el nombre del usuario del que se desea conocer el tiempo total de sesión.
A continuación, la función busca el nombre del usuario en el DataFrame, utilizando el método .str.contains() 
para buscar cualquier coincidencia de texto en la columna "Usuario".
Después, se crea un nuevo DataFrame con las columnas "Usuario" y "Session Time" del DataFrame original. 
Luego, se filtra este nuevo DataFrame para excluir cualquier fila que tenga un valor nulo o NaN en la columna "Usuario", utilizando el método .notnull().
Finalmente, se calcula el tiempo total de sesión del usuario utilizando el método .sum() en la columna "Session Time" del nuevo DataFrame. 
Este tiempo se convierte a una cadena de texto legible con el método datetime.timedelta(). Si el usuario no se encuentra en el DataFrame, se imprime un mensaje de error.

#El punto 4 es una función que busca los dispositivos utilizados por un usuario a través de su dirección MAC. 
La función solicita al usuario que ingrese una dirección MAC y luego busca en el archivo de Excel si existe esa dirección MAC en el DataFrame.
Si la dirección MAC se encuentra en el DataFrame, la función utiliza la función "loc" de Pandas para filtrar 
solo las columnas "MAC Cliente" y "Usuario" y devuelve todas las filas que contienen esa dirección MAC. 
Luego, agrupa las filas por "MAC Cliente" y "Usuario" y cuenta cuántas veces se utilizó esa dirección MAC para ese usuario. 
Finalmente, la función muestra la tabla resultante en la consola y la guarda en un archivo de Excel en la ruta especificada en "cs.PATH_MAC_USER".
Si la dirección MAC no se encuentra en el DataFrame, la función muestra un mensaje indicando que la dirección MAC no se encontró.

#El punto 5 es una funcion que busca las veces que un dispositivo se ha conectado junto con el usuario que ha utilizado el dispositivo y la cantidad de veces que ha sido utilizado.
Primero, se muestra un mensaje de carga de datos y se espera un segundo antes de pedirle al usuario que ingrese la dirección MAC del dispositivo que desea buscar. 
Luego, se carga el archivo xlsx utilizando el método operate_xlsx_file() y se busca en la columna "MAC Cliente" del DataFrame 
todas las filas que contengan la dirección MAC ingresada por el usuario utilizando el método str.contains(). 
Tambien en el código se agrego una línea para rellenar los valores nulos en la columna "MAC Cliente" con una cadena vacía, esto se hace para evitar errores en la búsqueda.
Si se encuentra la dirección MAC en el archivo, se agrupa por las columnas "MAC AP" y "Usuario" utilizando el método groupby(), 
luego se cuenta la cantidad de veces que se ha utilizado el dispositivo con la función size() y se restablece el índice del DataFrame con el método reset_index(). 
A continuación, se agrega una nueva columna al DataFrame con el valor de la dirección MAC ingresada por el usuario y se muestra el resultado. 
Por último, se guarda el resultado en un nuevo archivo xlsx utilizando el método to_excel() y se muestra un mensaje 
indicando que la cantidad de veces que se conectó el dispositivo se ha guardado en el archivo "Mac_User_Info.xlsx".
En caso de que no se encuentre la dirección MAC en el archivo, se muestra un mensaje indicando que no se ha encontrado la dirección MAC ingresada.

#El punto 6 es una función que busca la lista de usuarios conectados a una AP en un rango de fechas.
La función mac_ap_date1 permite buscar información en un archivo de Excel que contiene datos de conexión a internet de usuarios y dispositivos en una red.
La función solicita al usuario ingresar dos fechas y una dirección MAC de un dispositivo de acceso a la red (Access Point o AP) para buscar la información correspondiente. 
Las fechas deben ingresarse en un formato específico y deben ser válidas.
Si las fechas y la dirección MAC son válidas y se encuentran en el archivo de Excel, la función buscará en el archivo y mostrará 
la información correspondiente en la consola y también la guardará en un nuevo archivo de Excel.
Si se ingresa una fecha específica en lugar de un rango de fechas, 
la función buscará la información para el día específico ingresado y lo tratará como un rango de fechas desde las 00:00:00 hasta las 23:59:00.
Si se ingresa una fecha o dirección MAC inválida, la función mostrará un mensaje de error correspondiente en la consola.
La función también incluye algunas pausas breves para mejorar la legibilidad del texto en la consola.

#El punto 7 es una funcion que busca la lista de usuarios conectados a una AP en una fecha específica.
Se refiere a una función llamada mac_ap_date2 que recopila información de un archivo de Excel y la filtra por 
la dirección MAC de un punto de acceso y una fecha específica proporcionada por el usuario. 
La función inicia con una impresión de línea en blanco y compila una expresión regular para verificar el formato de la fecha ingresada por el usuario.
Se solicita al usuario que ingrese la fecha.
Se valida la fecha ingresada utilizando la expresión regular compilada.
Si la fecha es válida, se muestra un mensaje de confirmación y se solicita al usuario que ingrese la dirección MAC del punto de acceso.
Se muestra un mensaje de búsqueda de datos y se llama a una función operate_xlsx_file para cargar los datos desde un archivo de Excel.
La columna de "Inicio de Conexion" se convierte en una columna de marca de tiempo utilizando la función "pd.to_datetime".
Si la dirección MAC del punto de acceso está presente en los datos cargados, se filtra la información para incluir solo 
las filas que corresponden a la dirección MAC y la fecha especificada por el usuario.
La información filtrada se imprime en la pantalla.
Los datos filtrados se guardan en un archivo xlsx. llamado "Mac_AP_Date.xlsx".
Si la dirección MAC del punto de acceso no está presente en los datos, se muestra un mensaje de que no se encontraron coincidencias.
Si la fecha no es válida, se muestra un mensaje de que la fecha ingresada es incorrecta.

El archivo "main.py" utiliza los módulos constants, functions y analyzer para proporcionar una interfaz de línea de comandos para el usuario. 
El usuario puede ingresar diferentes opciones para realizar consultas y análisis de los datos contenidos en el archivo "usuarios.xlsx".
El programa comienza mostrando un menú de opciones al usuario, y luego se queda en un ciclo mientras espera que el usuario ingrese una opción. 
Si la opción ingresada es válida, el programa llama a la función correspondiente del objeto analyzer, que realiza la operación de análisis deseada y muestra los resultados en la pantalla.
La función return_menu() de functions se utiliza para pausar el programa y esperar a que el usuario presione Enter antes de volver al menú principal. 
Si el usuario ingresa una opción inválida, se muestra un mensaje de error y se le pide que ingrese otra opción.